/**

Forked from matthewsimo (MIT):

https://github.com/matthewsimo/scss-flex-grid

*/

$fg-columns: 12 !default;

$fg-class-row: 'row' !default;
$fg-class-col: 'col' !default;
$fg-class-off: 'off' !default;
$fg-class-pad: 'pad' !default;

// $t-breakpoint-xs-min: 0px; // Phone
$t-breakpoint-sm-min: 480px; // Phablet
$t-breakpoint-md-min: 768px; // Tablet
$t-breakpoint-lg-min: 960px; // Desktop ~1024
$t-breakpoint-xl-min: 1280px; // Desktop >= hd ready

$t-breakpoint-xs-gridoffset: 18px;
$t-breakpoint-sm-gridoffset: 25px;
$t-breakpoint-md-gridoffset: 25px;
$t-breakpoint-lg-gridoffset: 75px;
$t-breakpoint-xl-gridoffset: 100px;

$t-breakpoint-xs-gutter: 12px;
$t-breakpoint-sm-gutter: 12px;
$t-breakpoint-md-gutter: 12px;
$t-breakpoint-lg-gutter: 25px;
$t-breakpoint-xl-gutter: 25px;

/**
 * Break point namespace object: $fg-breakpoints
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace.
 * 3. The offset of the grid to the left and right border
 * 4. Gutter between the columns
 */
$fg-breakpoints: (
  (xs, 0, $t-breakpoint-xs-gridoffset, $t-breakpoint-xs-gutter),
  (sm, $t-breakpoint-sm-min, $t-breakpoint-sm-gridoffset, $t-breakpoint-sm-gutter),
  (md, $t-breakpoint-md-min, $t-breakpoint-md-gridoffset, $t-breakpoint-md-gutter),
  (lg, $t-breakpoint-lg-min, $t-breakpoint-lg-gridoffset, $t-breakpoint-lg-gutter),
  (xl, $t-breakpoint-xl-min, $t-breakpoint-xl-gridoffset, $t-breakpoint-xl-gutter)
) !default;


@function get-col-percent($column-num) {
  @return $column-num / $fg-columns * 100%;
}

@mixin spacing( $value, $type: margin, $orientation: vertical ) {
  @if $orientation == vertical {
    #{ $type }-top: $value;
    #{ $type }-bottom: $value;
  } @else {
    #{ $type }-left: $value;
    #{ $type }-right: $value;
  }
}

.t-#{ $fg-class-row } {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;

  @each $val in $fg-breakpoints {
    $size: nth($val, 2);
    $gutter: nth($val, 4);

    @if $size == 0 {
      @include spacing((-$gutter), margin, horizontal);
    } @else {
      @media only screen and (min-width: #{$size}) {
        @include spacing((-$gutter), margin, horizontal);
      }
    }
  }
}

%#{ $fg-class-col } {
  box-sizing: border-box;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  min-height: 1px;

  @each $val in $fg-breakpoints {
    $size: nth($val, 2);
    $gutter: nth($val, 4);

    @if $size == 0 {
      @include spacing(($gutter), padding, horizontal);
    } @else {
      @media only screen and (min-width: #{$size}) {
        @include spacing(($gutter), padding, horizontal);
      }
    }
  }
}

%#{ $fg-class-col }-flex {
  @extend %#{ $fg-class-col };
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}


@mixin grid-base( $namespace ) {
  .t-#{ $fg-class-col }-#{$namespace} {
    @extend %#{ $fg-class-col }-flex;
  }

  @for $i from 1 through $fg-columns {
    .t-#{ $fg-class-col }-#{$namespace}-#{$i} {
      @extend %#{ $fg-class-col };
    }
  }
}

@mixin grid-sizes( $namespace, $gutter ) {
  @for $i from 1 through $fg-columns {
    .t-#{ $fg-class-col }-#{$namespace}-#{$i} {
      flex-basis: get-col-percent($i);
      max-width: get-col-percent($i);
    }
  }

  @for $i from 1 through $fg-columns {

    @if ($i != $fg-columns) {
      .t-#{ $fg-class-off }-#{$namespace}-#{$i} {
        margin-left: get-col-percent($i);
      }
    }

  }

  .t-#{ $fg-class-off }-#{$namespace}-reset {
    margin-left: 0;
  }

  .t-#{ $fg-class-pad }-left-#{$namespace}-half {
    padding-left: get-col-percent(1)/2;
  }

  .t-#{ $fg-class-pad }-right-#{$namespace}-half {
    padding-right: get-col-percent(1)/2;
  }

  .t-#{ $fg-class-pad }-left-#{$namespace}-reset {
    padding-left: $gutter;
  }

  .t-#{ $fg-class-pad }-right-#{$namespace}-reset {
    padding-right: $gutter;
  }

}

@each $val in $fg-breakpoints {

  $namespace: nth($val, 1);
  @include grid-base($namespace);

}

@each $val in $fg-breakpoints {
  $namespace: nth($val, 1);
  $size: nth($val, 2);
  $gutter: nth($val, 4);

  @if $size == 0 {
    @include grid-sizes($namespace, $gutter);
  } @else {
    @media only screen and (min-width: #{$size}) {
      @include grid-sizes($namespace, $gutter);
    }
  }
}

@each $val in $fg-breakpoints {
  $namespace: nth($val, 1);
  $size: nth($val, 2);

  @if $size == 0 {
    .t-top-margin-#{ $val } {
      margin-top: 30px;
    }
    .t-top-margin-#{ $val }-reset {
      margin-top: 0px;
    }
  } @else {
    @media only screen and (min-width: #{$size}) {
      .t-top-margin-#{ $namespace } {
        margin-top: 30px;
      }
      .t-top-margin-#{ $namespace }-reset {
        margin-top: 0px;
      }
    }
  }
}

@each $val in $fg-breakpoints {
  $namespace: nth($val, 1);
  $size: nth($val, 2);
  $offset: nth($val, 3);
  $gutter: nth($val, 4);

  .t-gridoffset-#{ $namespace } {
    @each $val2 in $fg-breakpoints {
      $namespace2: nth($val2, 1);
      $size2: nth($val2, 2);
      $offset2: nth($val2, 3);

      @if $size2 >= $size {
        @media only screen and (min-width: #{$size2}) {
          margin-left: $offset2;
          margin-right: $offset2;
        }
      }
    }
  }

  .t-gridoffset-p-#{ $namespace } {
    @each $val2 in $fg-breakpoints {
      $namespace2: nth($val2, 1);
      $size2: nth($val2, 2);
      $offset2: nth($val2, 3);

      @if $size2 >= $size {
        @media only screen and (min-width: #{$size2}) {
          padding-left: $offset2;
          padding-right: $offset2;
        }
      }
    }
  }

  .t-row-with-gridoffset {
    @extend .t-row;
    @media only screen and (min-width: #{$size}) {
      margin-left: $offset - $gutter;
      margin-right: $offset - $gutter;
    }
  }
}

